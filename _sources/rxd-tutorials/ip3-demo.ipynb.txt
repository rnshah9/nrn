{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IP3 demo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.010652Z",
     "iopub.status.busy": "2022-05-31T15:39:23.009994Z",
     "iopub.status.idle": "2022-05-31T15:39:23.112399Z",
     "shell.execute_reply": "2022-05-31T15:39:23.111788Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from neuron import h, crxd as rxd\n",
    "\n",
    "h.load_file(\"stdrun.hoc\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.115625Z",
     "iopub.status.busy": "2022-05-31T15:39:23.115073Z",
     "iopub.status.idle": "2022-05-31T15:39:23.118624Z",
     "shell.execute_reply": "2022-05-31T15:39:23.118105Z"
    }
   },
   "outputs": [],
   "source": [
    "dend = h.Section(name=\"dend\")\n",
    "dend.L = 100\n",
    "dend.nseg = 101"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.121547Z",
     "iopub.status.busy": "2022-05-31T15:39:23.121105Z",
     "iopub.status.idle": "2022-05-31T15:39:23.125839Z",
     "shell.execute_reply": "2022-05-31T15:39:23.125318Z"
    }
   },
   "outputs": [],
   "source": [
    "def my_initial(node):\n",
    "    if 0.4 < node.segment.x < 0.6:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "\n",
    "cyt = rxd.Region(h.allsec(), name=\"cyt\", nrn_region=\"i\")\n",
    "ip3 = rxd.Species(cyt, name=\"ip3\", d=1, initial=my_initial)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.129549Z",
     "iopub.status.busy": "2022-05-31T15:39:23.128200Z",
     "iopub.status.idle": "2022-05-31T15:39:23.784935Z",
     "shell.execute_reply": "2022-05-31T15:39:23.784149Z"
    }
   },
   "outputs": [],
   "source": [
    "from matplotlib import pyplot\n",
    "\n",
    "\n",
    "def plot_it():\n",
    "    xs = [seg.x * dend.L for seg in dend]\n",
    "    ys = [seg.ip3i for seg in dend]\n",
    "    pyplot.plot(xs, ys)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.788902Z",
     "iopub.status.busy": "2022-05-31T15:39:23.788363Z",
     "iopub.status.idle": "2022-05-31T15:39:23.976283Z",
     "shell.execute_reply": "2022-05-31T15:39:23.975655Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '[IP3]')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "h.finitialize(-65)\n",
    "for tstop in [0, 50, 100, 150]:\n",
    "    h.continuerun(tstop)\n",
    "    plot_it()\n",
    "pyplot.xlabel(\"x (µm)\")\n",
    "pyplot.ylabel(\"[IP3]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.979528Z",
     "iopub.status.busy": "2022-05-31T15:39:23.979030Z",
     "iopub.status.idle": "2022-05-31T15:39:23.990415Z",
     "shell.execute_reply": "2022-05-31T15:39:23.989824Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crossed 100 nM at t = 2.8250000000000064 ms\n"
     ]
    }
   ],
   "source": [
    "nM = 1e-6  # relative to NEURON's default mM\n",
    "\n",
    "h.finitialize(-65)\n",
    "while dend(0.7).ip3i < 100 * nM:\n",
    "    h.fadvance()\n",
    "\n",
    "print(\"crossed 100 nM at t = {} ms\".format(h.t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-31T15:39:23.993426Z",
     "iopub.status.busy": "2022-05-31T15:39:23.993017Z",
     "iopub.status.idle": "2022-05-31T15:39:24.336726Z",
     "shell.execute_reply": "2022-05-31T15:39:24.335889Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "peak ip3 = 0.25437182627374194\n",
      "final ip3 = 0.2103198308254167\n"
     ]
    }
   ],
   "source": [
    "ip3_vec = h.Vector()\n",
    "ip3_vec.record(dend(0.7)._ref_ip3i)\n",
    "t_vec = h.Vector()\n",
    "t_vec.record(h._ref_t)\n",
    "\n",
    "h.finitialize(-65)\n",
    "h.continuerun(1000)\n",
    "max_ip3 = max(ip3_vec)\n",
    "print(\"peak ip3 =\", max_ip3)\n",
    "print(\"final ip3 =\", dend(0.7).ip3i)"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
